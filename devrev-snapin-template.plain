***Definitions:***

- The Snap-In is a TypeScript Node.js application.

- The Function implements part of The Snap-In functionality.
  - Details on how The Function must be invoked are provided in the resource [Function Invocation](docs/function_invocation.mdx).
  - The Function should only take the first event from the array of events and process it. The Function can be invoked multiple times for multiple events.

- The Airdrop SDK Library for TypeScript helps developers build snap-ins that integrate with DevRev’s Airdrop platform.
  - The documentation for the The Airdrop SDK Library is provided in the resource [airdrop_sdk_library_documentation.md](docs/airdrop_sdk_library_documentation.md).
  - Please note that EventContextIn and EventContextOut interfaces are deprecated.

- The External Domain Metadata is a JSON object that describes the logical domain model of an external system. It defines the types of external record types, the relationships between those record types, and the metadata associated with each field, including the field’s data type, human-readable name, and other descriptive attributes.

- The Initial Domain Mapping is a JSON object that defines how the logical domain model described by The External Domain Metadata maps to the target domain model in DevRev. It specifies the correspondence between each external record type and DevRev leaf type, as well as the mapping of individual fields, including transformation logic, value conversions, and any fixed or default values.

- The External Sync Unit Item Count is a numeric field representing the total number of items (such as cards) contained within a given external sync unit. It is accessible as "item_count" field of the external sync unit.

- The Normalization Function is a function that is responsible for normalizing the data from The API to the data expected by The External Domain Metadata JSON object's record type.

- The Extraction Function is The Function named "extraction". It is responsible for pushing data to the DevRev servers (The DevRev Servers) based on various event types.
  - "event_type" equals "EXTRACTION_DATA_START" or "event_type" equals "EXTRACTION_DATA_CONTINUE" and we get a timeout, The Worker Thread should emit event "EXTRACTION_DATA_PROGRESS".

***Non-Functional Requirements:***

- The Snap-In must be implemented in TypeScript (The Implementation).

- The Snap-In will run on Node.js as the runtime environment.

- The Snap-In should use The Airdrop SDK Library version "1.5.1" for handling data extraction and loading, pushing data, event-driven actions, state management, and artifact handling.

- Use snake_case for JSON keys.

- The Implementation should include unit tests using Jest framework. The required unit test coverage threshold should be set to 60% (but please note that if the unit tests are failing the reported unit test coverage is not correct, that is, it's lower than it actually is).

- The code of The Function (including tests) should be in a subfolder at the path `src/functions`. The folder name should correspond to the function name.

- The shared code (including libraries, utilities, adapters, and other common code) used by multiple The Function should be placed in the `src/core` folder. The code in this folder should not depend on any specific The Function implementation.

- During the data extraction phase, The Normalization Function's "data" field for specific record type should map precisely the fields that are present in The External Domain Metadata JSON object for that record type. The Normalization Function should map no additional fields other than those specified in The External Domain Metadata JSON object, and also no object fields from The External Domain Metadata JSON should be omitted in normalization.


***Test Requirements:***

- The Conformance Tests of The Snap-In should be implemented in TypeScript with target language version es2017. The Conformance Tests should utilize the TypeScript target language version es2017 with configuration settings for module interoperability, strict type checking, declaration file generation, and JSON module support.

- The Conformance Tests must be in the top folder.

- The Conformance Tests will run on Node.js as the runtime environment.

- The Conformance Tests will be executed using the "npm test" command. The command "npm test" should be accessible in the `package.json` file of The Conformance Tests.

- The Conformance Tests must complete within 120 seconds (The Conformance Tests Timeout). If The Conformance Tests Timeout elapses, the process executing The Conformance Tests will be terminated.

- The Snap-In runs on Node.js and the test server is accessible at http://localhost:8000/handle/sync (The Test Snap-In Server).

- The Conformance Tests should use the The Test Snap-In Server - do not use mock server.

- The Conformance Tests should spin a server at http://localhost:8002 for testing callbacks (The Callback Server).

- The DevRev Server runs at http://localhost:8003, so it must not be mocked.

- The Worker Data Server is part of The DevRev Server and is accessible at http://localhost:8003/external-worker, so it must not be mocked.

- The `jest.setup.js` file is managed externally and cannot be modified within The Conformance Tests.

- All test files from The Conformance Tests must use the `.test.ts` suffix to be discoverable by Jest's default test pattern matching.

- The Conformance Tests should send a single event to the Snap-In Server in the request body without wrapping it in an array.


# The TypeScript Node.js application boilerplate

***Non-Functional Requirements:***

- Logic of pushing data to The DevRev Servers must be implemented in the worker thread and invoked with the "spawn" method from The Airdrop SDK Library.

- The Function being implemented *MUST not* be called "extraction" or "loading".

***Functional Requirements:***

- Implement The Function that only checks if The Function can be invoked.

- Implement The Function called "test_external_sync_units" that provides a test of the 'external sync units' part of the extraction workflow as described in the resource [external-sync-units-extraction.mdx](docs/external-sync-units-extraction.mdx). Only check if the extraction can be triggered and that it successfully completes. Disregard all other details.

  ***Acceptance Tests:***

  - Test The Function using the resource [external_sync_unit_check.json](test_data/external_sync_unit_check.json). Test is successful if The Callback Server receives from DevRev an event with "event_type" that equals "EXTRACTION_EXTERNAL_SYNC_UNITS_DONE". The test must not send the event directly to The Callback Server.

- Implement The Function called "data_extraction_check" (The Data Extraction Check Function) that provides a test of the 'data extraction' part of the extraction workflow as described in the resource [data-extraction.md](docs/data-extraction.md). The Data Extraction Check Function should:
  - Initialize a single repo "users"
  - normalize the users data using The Normalization Function
  - push the normalized users data to The DevRev Servers
  - Note: The Data Extraction Check Function should be simplified and should disregard all other details.

  ***Acceptance Tests:***
  
  - Test The Function using the resource [data_extraction_check.json](test_data/data_extraction_check.json). Test is successful if The Callback Server receives from DevRev an event with "event_type" that equals "EXTRACTION_DATA_DONE". The test must not send the event directly to The Callback Server.
